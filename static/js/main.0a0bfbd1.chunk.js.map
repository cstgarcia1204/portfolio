{"version":3,"sources":["components/Main.js","components/Logo.js","components/Navigator.js","components/Contact.js","components/Projects.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Main","args","state","isContactClicked","handleSubmit","bind","this","setState","prevState","className","to","onClick","React","Component","Logo","src","alt","Navi","Fragment","Contact","href","fontSize","useStyles","makeStyles","card","maxWidth","Projects","classes","accent","lightGreen","A100","Card","style","backgroundColor","CardActionArea","Link","CardMedia","component","height","image","title","CardContent","Typography","variant","color","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a0bfbd1.chunk.js","sourcesContent":["import React from 'react';\n//import Navi from './Navigator'\n//import Logo from './Contact'\nimport {Redirect} from 'react-router-dom'\n\n\n\nclass Main extends React.Component {\n\n  constructor(args){\n    super(args)//rquerido por la subclase component\n    this.state={\n          isContactClicked: false\n    }\n    this.handleSubmit= this.handleSubmit.bind(this)\n  }\n\n  handleSubmit(){\n    this.setState((prevState)=>{\n      return {isContactClicked : true/*!prevState.isContactClicked*/}\n      \n    })\n  }\n\n  \n  render() {\n    return (\n      <div className=\"mainLogo\">\n        {this.state.isContactClicked ? (\n          <div>\n          <Redirect to='/projects' />\n          </div>\n            \n          ) : (\n          <div>\n            <Redirect to='/logo' />\n            <marquee className=\"nameContact\" onClick={this.handleSubmit}> Welcome!! Click here to see my Projects</marquee>\n          </div>\n            )}\n      </div>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\n//import Navi from './Navigator'\n//import Contact from './Contact'\nimport {Link} from 'react-router-dom'\n\n\nclass Logo extends React.Component {\n\n\n  \n  render() {\n    return (\n      <div>\n        \n\n        \n        <header className=\"Logo-header\">\n          <img src=\"https://i.ibb.co/3fXmXRH/logo-ck.png\" className=\"Logo-logo\" alt=\"logo\" />\n          <h2 className=\"myName\">Hello! my name is Cinthia Sánchez de Tagle</h2>\n          <h2>I'm a Junior Front-End Developer_</h2>\n        </header>\n        <li className='logoContact'>\n            <Link to=\"/Contact\">Contact</Link>\n        </li>\n       \n      </div>\n    );\n  }\n}\n\nexport default Logo;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\nconst Navi= ()=>{\n    return(\n        <React.Fragment>\n            <nav className='navBar'>\n            <ul>\n                \n                <li >\n                    <Link to=\"/About\">About Me</Link>\n                </li>\n                <li>\n                    <Link to=\"/Contact\">Contact</Link>\n                </li>\n                <li>\n                    <Link to=\"/Projects\">Projects</Link>\n                </li>\n                <li>\n                    <Link to=\"/Logo\">Home</Link>\n                </li>\n                \n            </ul>\n            </nav>\n        </React.Fragment>\n    );\n\n};\n\nexport default Navi;","import React from 'react';\nimport Navi from './Navigator'\n\nimport EmailIcon from '@material-ui/icons/Email';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\n\n//import {data} from '../myData.js'\n\n\n\n\n\n\n\n\nexport default function Contact(){ \n\n    \n        return(\n            \n\n\n                <div className= 'contactData'>\n                    <h2>Contact me :</h2>\n                    <h2> <a href='mailto:ckstgarcia@gmail.com'><EmailIcon fontSize='large'></EmailIcon> ckstgarcia@gmail.com</a></h2>\n                    <h2> <a href='https://github.com/cstgarcia1204'><GitHubIcon fontSize='large'></GitHubIcon> cstgarcia1204</a></h2>\n                    <h2> <a href='https://www.linkedin.com/in/cinthia-sanchez-de-tagle/'><LinkedInIcon fontSize='large'></LinkedInIcon> Cinthia Sánchez de Tagle</a></h2>\n                \n\n                    <Navi/>\n                </div>\n        );\n    \n};","import React from 'react';\nimport Navi from './Navigator'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport lightGreen from '@material-ui/core/colors/lightGreen'\n\n\n\n\n\n\n\n\n\nconst useStyles = makeStyles({\n    card: {\n      maxWidth: 500,\n    },\n  });\n\n\nexport default function Projects(){ \n\n    const classes = useStyles();\n    const accent =lightGreen.A100;\n    \n        return(\n            <div className='newPreview'> \n                \n\n                <section>\n                    <Card className={classes.card} style={{ backgroundColor: accent }}>\n                        <h2>Data Lovers</h2>\n                        <CardActionArea>\n                            <Link href='https://surferzer.github.io/GDL003-data-lovers/src/'>\n                                <CardMedia\n                                component=\"img\"\n                                alt=\"data-lovers\"\n                                height=\"250\"\n                                image=\"https://i.ibb.co/ZMGgMkW/Screenshot-2019-10-17-Data-Lovers.jpg\"\n                                title=\"Data-lovers\"\n                                />\n                            </Link>\n                            <CardContent>\n                                <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n                                Project to practice handle of arrays and use of .json files, developed with vanilla JS\n                                </Typography>\n                            </CardContent>\n                        </CardActionArea>\n                    </Card>\n                </section>\n\n                <section>\n                    <Card className={classes.card} style={{ backgroundColor: accent }}>\n                        <h2>Movie Challenge</h2>\n                        <CardActionArea>\n                            <Link href='https://cstgarcia1204.github.io/GDL003-movie-challenge/src/'>\n                                <CardMedia\n                                component=\"img\"\n                                alt=\"movie-challenge\"\n                                height=\"230\"\n                                image=\"https://i.ibb.co/0CXGhBk/Screenshot-2019-10-17-Movie-Challenge.png\"\n                                title=\"Movie-challenge\"\n                                />\n                            </Link>\n                            <CardContent>   \n                                <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n                                Project created during a challenge, using OMDb API (The Open Movie Database), first approach with promises in JS\n                                </Typography>\n                            </CardContent>\n                        </CardActionArea>\n                    </Card>\n                </section>\n\n                <section>\n                    <Card className={classes.card} style={{ backgroundColor: accent }}>\n                        <h2>Red Social</h2>\n                        <CardActionArea>\n                            <Link href='https://cstgarcia1204.github.io/GDL003-social-network/src/'>\n                                <CardMedia\n                                component=\"img\"\n                                alt=\"movie-challenge\"\n                                height=\"220\"\n                                image=\"https://i.imgur.com/EHbKcaC.jpg\"\n                                title=\"Red-social\"\n                                />\n                            </Link>\n                            <CardContent>   \n                                <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n                                FoodJUNKIES project is a Social Network that was developed, contemplating a Login, Content and the use of Firebase and GoogleMaps API.\n                                In this case the topic is food recommendation app.\n                                WebApp developed whit Vanilla JavaScript\n                                </Typography>\n                            </CardContent>\n                        </CardActionArea>\n                    </Card>\n                </section>\n\n                <section>\n                    <Card className={classes.card} style={{ backgroundColor: accent }}>\n                        <h2>Ciboulette</h2>\n                        <CardActionArea>\n                            <Link href='https://LauraMayaR.github.io/GDL003-Burger-Queen-Front-End/'>\n                                <CardMedia\n                                component=\"img\"\n                                alt=\"ciboulette\"\n                                height=\"220\"\n                                image=\"https://i.ibb.co/J3y5J5v/Screenshot-2019-10-17-Ciboulette.png\"\n                                title=\"Ciboulette\"\n                                />\n                            </Link>\n                            <CardContent>   \n                                <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n                                First approach to the Back-End.\n                                Project for a restaurant orders service app, I was in the back-end team creating a RESTful API with the cloud service of mongodb-Atlas, moongoseJS, ExpressJs, postMan.\n                                </Typography>\n                            </CardContent>\n                        </CardActionArea>\n                    </Card>\n                </section>\n                <Navi/>\n            </div>\n        );\n    \n};\n","import React from 'react';\nimport Navi from './Navigator'\n//import Contact from './Contact'\n//import {Link} from 'react-router-dom'\n\n\nclass About extends React.Component {\n\n\n  \n  render() {\n    return (\n      <div>\n        <img src=\"https://i.imgur.com/aGx5AFG.jpg\" alt=\"cinthia\" className='myPhoto'/>\n        <header className=\"About-header\">\n          <h2>About Me_</h2>\n            <p>\n              I am passionate about technology and business administration.\n            </p>\n            <p>\n              I have studied Turism at University of Guadalajara and now I have transferred my passion  to programming languages.\n            </p>\n            <p>\n            Right now my main professional goal is to find a job that will give me an opportunity to deepen and improve my programming skills.\n            </p>\n            <p>\n              Mainly I want to focus in keep on learning to become a full-stack developer.\n            </p>\n            <p>\n            I work with technologies such as HTML5, CSS3, JavaScript. I'm also familiar with React, and Firebase.\n            </p>\n         \n          <p></p>\n        </header>\n\n        <Navi/>\n      </div>\n    );\n  }\n}\n\n\nexport default About;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main'\nimport Logo from './components/Logo';\nimport Contact from './components/Contact';\nimport Projects from './components/Projects'\nimport About from './components/About';\n//import Navi from './components/Navigator';\n\nimport {HashRouter, Route} from 'react-router-dom';\n\nclass App extends React.Component {\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <React.Fragment>\n            <Route path=\"/\" component={Main}/>\n            <Route path=\"/Logo\" component={Logo}/>\n            <Route path=\"/Projects\" component={Projects}/>\n            <Route path=\"/Contact\" component={Contact}/>\n            <Route path=\"/About\" component={About}/>\n          </React.Fragment>\n        </HashRouter>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}