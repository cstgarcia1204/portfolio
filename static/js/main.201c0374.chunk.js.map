{"version":3,"sources":["components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Contact","className","href","tittle","src","alt","React","Component","App","type","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAwCeA,G,uLAjCP,OACA,oCACI,yBAAKC,UAAU,UACX,uBAAGC,KAAK,qDAAqDC,OAAO,UACpE,yBAAKC,IAAI,+CAA+CC,IAAI,WAD5D,MAGJ,yBAAKJ,UAAU,cACX,uBAAGC,KAAK,sDAAsDC,OAAO,cACrE,yBAAKC,IAAI,iEAAiEC,IAAI,eAD9E,MAGJ,yBAAKJ,UAAU,kBACX,uBAAGC,KAAK,8DAA8DC,OAAO,kBAC7E,yBAAKC,IAAI,qEAAqEC,IAAI,mBADlF,MAGJ,yBAAKJ,UAAU,YACX,uBAAGC,KAAK,uEAAuEC,OAAO,YACtF,yBAAKC,IAAI,8DAA8DC,IAAI,aAD3E,MAGJ,yBAAKJ,UAAU,cACX,uBAAGC,KAAK,yEAAyEC,OAAO,cACxF,yBAAKC,IAAI,gEAAgEC,IAAI,eAD7E,MAGJ,yBAAKJ,UAAW,eACZ,2DACA,8E,GA3BMK,IAAMC,Y,eC2BbC,E,iLAvBX,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKG,IAAI,sCAAsCH,UAAU,WAAWI,IAAI,SACxE,8CAGA,4EAIF,kBAAC,IAAD,KACA,wBAAII,KAAK,UACG,kBAAC,IAAD,CAAMC,GAAG,YAAT,YAER,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWZ,U,GAlB5BM,IAAMC,WCOJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.201c0374.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nclass Contact extends React.Component {\n   \n    render(){\n        return(\n        <>\n            <div className='cypher'> \n                <a href=\"https://cstgarcia1204.github.io/GDL003-cipher/src/\" tittle=\"cipher\">\n                <img src=\"https://i.ibb.co/khZKzZy/inicio-Internet.png\" alt=\"cipher\"/> </a>\n            </div>\n            <div className='dataLovers'> \n                <a href=\"https://surferzer.github.io/GDL003-data-lovers/src/\" tittle=\"dataLovers\">\n                <img src=\"https://i.ibb.co/ZMGgMkW/Screenshot-2019-10-17-Data-Lovers.jpg\" alt=\"dataLovers\"/> </a>\n            </div>\n            <div className='movieChallenge'> \n                <a href=\"https://cstgarcia1204.github.io/GDL003-movie-challenge/src/\" tittle=\"movieChallenge\">\n                <img src=\"https://i.ibb.co/0CXGhBk/Screenshot-2019-10-17-Movie-Challenge.png\" alt=\"movieChallenge\"/> </a>\n            </div>\n            <div className='labNotes'> \n                <a href=\"https://cstgarcia1204.github.io/GDL003-lab-notes/?mode=select#/login\" tittle=\"labNotes\">\n                <img src=\"https://i.ibb.co/FkpJb6X/Screenshot-2019-10-17-ck-notes.png\" alt=\"labNotes\"/> </a>\n            </div>\n            <div className='ciboulette'> \n                <a href=\"https://lauramayavayahayaraya.github.io/GDL003-Burger-Queen-Front-End/\" tittle=\"ciboulette\">\n                <img src=\"https://i.ibb.co/J3y5J5v/Screenshot-2019-10-17-Ciboulette.png\" alt=\"ciboulette\"/> </a>\n            </div>\n            <div className= 'contactData'>\n                <h2>Email: ckstgarcia@gmail.com</h2>\n                <h2>Github: https://github.com/cstgarcia1204</h2>\n            </div>\n           \n        </>\n        );\n    }\n\n};\n\nexport default Contact;","import React from 'react';\nimport './App.css';\nimport Contact from './components/Contact';\nimport {BrowserRouter, Route, Link} from 'react-router-dom';\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src=\"https://i.ibb.co/YXYBr09/logock.png\" className=\"App-logo\" alt=\"logo\" />\n          <h1>\n          Web Developer_\n          </h1>\n          <h2>\n            Cinthia Karen Sánchez de Tagle García\n          </h2>\n        </header>\n        <BrowserRouter>\n        <li type='circle'>\n                    <Link to=\"/Contact\">Contact</Link>\n                </li>\n            <Route path=\"/contact\" component={Contact}/>\n        </BrowserRouter>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}